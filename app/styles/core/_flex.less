.fx {
  &-1 {
    flex: 1;
    min-width: 0; // prevents adding "allow-text-overflow-on-children" class everywhere needed
  }

  // Flex Direction definition
  &-row {
    flex-direction: row;
    display: flex;
    min-width: 0;

    &-reverse {
      flex-direction: row-reverse;
    }
  }
  &-col {
    flex-direction: column;
    display: flex;
    min-width: 0;

    &-reverse {
      flex-direction: column-reverse;
    }
  }

  // Main Axis Alignment
  &-malign {
    &-center {
      justify-content: center;
    }
    &-start {
      justify-content: flex-start;
    }
    &-end {
      justify-content: flex-end;
    }
    &-space-between {
      justify-content: space-between;
    }
    &-space-around {
      justify-content: space-around;
    }
    &-space-evenly {
      justify-content: space-evenly;
    }
  }

  // Cross Axis Alignment
  &-xalign {
    &-center {
      align-items: center;
    }
    &-start {
      align-items: flex-start;
    }
    &-end {
      align-items: flex-end;
    }
  }

  &-basis {
    &-pc-33 {
      flex-basis: 33.33%;
    }
    &-pc-66 {
      flex-basis: 66.66%;
    }

    // Generates fx-basis-pc-0, fx-basis-pc-5, fx-basis-pc-10... up until 100
    .generate-fx-basis(100);
    .generate-fx-basis(@n, @i: 0) when (@i =< @n) {
      &-pc-@{i} {
        flex-basis: @i * 1%;
      }
      .generate-fx-basis(@n, (@i + 5));
    }
  }

  &-gap {
    .generate-fx-gap(100);
    .generate-fx-gap(@n, @i: 0) when (@i =< @n) {
      &-pc-@{i} {
        gap: @i * 1%;
      }
      &-px-@{i} {
        gap: @i * 1px;
      }
      .generate-fx-gap(@n, (@i + 1));
    }
  }

  &-wrap {
    flex-wrap: wrap;
  }
}

// Keep in my mind that the Alignment axis are switched based on the flex-direction:

// flex-direction: row
// <----- Main Axis ----->
// ^
// | C
// | r
// | o
// | s
// | s
// v

// flex-direction: column
// <----- Cross Axis ----->
// ^
// | M
// | a
// | i
// | n
// v
